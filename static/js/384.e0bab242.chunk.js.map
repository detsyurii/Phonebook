{"version":3,"file":"static/js/384.e0bab242.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactsAddForm/ContactsAddForm.module.css?246a","components/ContactsAddForm/ContactsAddForm.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactItem/ContactItem.module.css?a943","components/ContactsList/ContactItem/ContactItem.jsx","redux/contacts/contacts.selectors.js","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContainer\":\"ContactsAddForm_modalContainer__NetWG\",\"modalContent\":\"ContactsAddForm_modalContent__VPBUK\",\"form\":\"ContactsAddForm_form__SJTHv\",\"label\":\"ContactsAddForm_label__Kskmq\",\"input\":\"ContactsAddForm_input__7QnvM\",\"button\":\"ContactsAddForm_button__9SUBv\",\"closeButton\":\"ContactsAddForm_closeButton__pf3bv\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContactThunk } from 'redux/contacts/contacts.thunk';\nimport css from './ContactsAddForm.module.css';\n\nexport const ContactsAddForm = ({ closeModal, contacts }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const verifiedContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (verifiedContact) {\n      alert(`Contact ${name} already exists`);\n      return;\n    }\n    const id = nanoid();\n    dispatch(addContactThunk({ id, name, number }));\n    setName('');\n    setNumber('');\n    closeModal();\n  };\n\n  const handleBackdropClick = event => {\n    if (event.target === event.currentTarget) {\n      closeModal();\n    }\n  };\n\n  return (\n    <>\n      <div className={css.modalContainer} onClick={handleBackdropClick}>\n        <div className={css.modalContent}>\n          <div className={css.form}>\n            <button onClick={closeModal} className={css.closeButton}>\n              &times;\n            </button>\n            <form action=\"\" onSubmit={handleSubmit}>\n              <label htmlFor={inputNameId} className={css.label}>\n                <p>Name</p>\n                <input\n                  onChange={handleChange}\n                  id={inputNameId}\n                  type=\"text\"\n                  name=\"name\"\n                  value={name}\n                  className={css.input}\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                />\n              </label>\n              <label htmlFor={inputNumberId} className={css.label}>\n                <p>Number</p>{' '}\n                <input\n                  id={inputNumberId}\n                  onChange={handleChange}\n                  type=\"tel\"\n                  name=\"number\"\n                  value={number}\n                  className={css.input}\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required\n                />\n              </label>\n\n              <button type=\"submit\" className={css.button}>\n                Add contact\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactContainer\":\"ContactItem_contactContainer__IZ0Kr\",\"contactText\":\"ContactItem_contactText__b6mBb\",\"deleteButton\":\"ContactItem_deleteButton__AROX8\"};","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contacts.thunk';\nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  return (\n    <>\n      <div className={css.contactContainer}>\n        <p className={css.contactText}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          onClick={handleDeleteContact}\n          className={css.deleteButton}\n        >\n          delete\n        </button>\n      </div>\n    </>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"ContactsList_filterContainer__Cia7+\",\"filterInput\":\"ContactsList_filterInput__zy+aj\",\"contactList\":\"ContactsList_contactList__qIIH9\",\"contactText\":\"ContactsList_contactText__r3+vD\"};","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactItem } from './ContactItem/ContactItem';\nimport { getContactsThunk } from 'redux/contacts/contacts.thunk';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport css from './ContactsList.module.css';\n\nexport const ContactsList = () => {\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const handleChangeFilter = evt => {\n    const { value } = evt.currentTarget;\n    setFilter(value);\n  };\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <div className={css.filterContainer}>\n        <h3>Find contacts by name</h3>\n        <input\n          type=\"text\"\n          className={css.filterInput}\n          onChange={handleChangeFilter}\n          value={filter}\n        />\n      </div>\n\n      <ul className={css.contactList}>\n        {filteredContacts?.map(contact => {\n          return (\n            <li key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"addButton\":\"ContactsPage_addButton__0LLw4\"};","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ContactsAddForm } from 'components/ContactsAddForm/ContactsAddForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\n  const contacts = useSelector(selectContacts);\n\n  const openModal = () => {\n    setIsAddContactModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsAddContactModalOpen(false);\n  };\n\n  useEffect(() => {\n    const handleEscapeKey = event => {\n      if (event.key === 'Escape') {\n        closeModal();\n      }\n    };\n\n    if (isAddContactModalOpen) {\n      window.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isAddContactModalOpen]);\n\n  return (\n    <>\n      <button onClick={openModal} className={css.addButton}>\n        Add new contact\n      </button>\n      {isAddContactModalOpen && (\n        <ContactsAddForm closeModal={closeModal} contacts={contacts} />\n      )}\n      <ContactsList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactsAddForm","_ref","closeModal","contacts","name","setName","useState","number","setNumber","dispatch","useDispatch","inputNameId","inputNumberId","handleChange","evt","value","target","_jsx","_Fragment","children","className","css","onClick","event","currentTarget","_jsxs","action","onSubmit","preventDefault","find","contact","toLowerCase","alert","concat","addContactThunk","htmlFor","onChange","type","title","required","ContactItem","handleDeleteContact","deleteContactThunk","selectContacts","state","items","ContactsList","filter","setFilter","useSelector","useEffect","getContactsThunk","filteredContacts","includes","map","ContactsPage","isAddContactModalOpen","setIsAddContactModalOpen","handleEscapeKey","key","window","addEventListener","removeEventListener","openModal"],"sourceRoot":""}